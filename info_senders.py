from telebot.types import Message
from source import BOT, REQS_PORTION
from os.path import split
from common import Sleep
import source


def SendTariffInfo(data: dict) -> (str, list):
    msg = 'üìä –î–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ç—Ä–∞–Ω—ã:\n\n'
    countries = []
    for code, info in data['countries'].items():
        msg += f'{info['name']} | {info['code']} | {'–¥–æ—Å—Ç—É–ø–Ω–∞' if info['enable'] else '–Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞'}\n'
        if info['enable']:
            countries.append(info['code'])
    return msg, countries


def SendRequests(message: Message, reqs: list, amount: int = None, portion: int = REQS_PORTION) -> None:
    if reqs:
        cut_reqs = reqs[-amount:] if amount else reqs
        BOT.send_message(message.from_user.id, f"üîç –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞—è–≤–æ–∫: {len(reqs)}, –ø–æ–∫–∞–∑—ã–≤–∞—é: {len(cut_reqs)}")
        for idx, i in enumerate(range(0, len(cut_reqs), portion)):
            portion_requests = cut_reqs[i:i + portion]
            portion_message = ''
            for j, req in enumerate(portion_requests, start=1):
                num = idx * portion + j
                separator = '	‚Äî' * 12 if num < 100 else '	‚Äî' * 11
                portion_message += f"{separator} {idx * portion + j} {separator}\n"
                portion_message += PrintRequest(req) + '\n'

            BOT.send_message(message.from_user.id, portion_message, parse_mode='HTML')
            Sleep(1)
    else:
        BOT.send_message(message.from_user.id, 'üîç –ù–µ—Ç –∑–∞—è–≤–æ–∫')


def PrintRequest(req: dict) -> str:
    return (f"<b>–ù–∞—á–∞–ª–æ</b>: {req['start']}\n"
            f"<b>–ö–æ–Ω–µ—Ü</b>: {req['finish']}\n"
            f"<b>–¢–∏–ø</b>: {req['order_type']}\n"
            f"<b>–ñ–µ–ª–∞–µ–º–æ–µ</b>: {req['planned']}\n"
            f"<b>–í—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–µ</b>: {req.get('current', 0)}\n"
            f"<b>–°—Å—ã–ª–∫–∞</b>: {req['link']}\n"
            f"<b>–ò–Ω–∏—Ü–∏–∞—Ç–æ—Ä</b>: {req['initiator']}\n"
            f"<b>–ò–Ω–¥–µ–∫—Å –∞–∫–∫–∞—É–Ω—Ç–∞</b>: {req.get('cur_acc_index', 'N/A')}\n"
            f"<b>–≠–º–æ–¥–∑–∏</b>: {req.get('emoji', 'N/A')}")


def PrintAutomaticRequest(chan: str, data: dict) -> str:
    return (f"<b>–ö–∞–Ω–∞–ª</b>: {chan}\n"
            f"<b>–ò–Ω–∏—Ü–∏–∞—Ç–æ—Ä</b>: {data[chan]['initiator']}\n"
            f"<b>–í—Ä–µ–º–µ–Ω–Ω–æ–π –∏–Ω—Ç–µ—Ä–≤–∞–ª</b>: {data[chan]['time_limit']}\n"
            f"<b>–°–æ–∑–¥–∞–Ω–∞</b>: {data[chan]['approved']}\n"
            f"<b>–ù–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏—é</b>: {data[chan]['annual']}\n"
            f"<b>–†–∞–∑–±—Ä–æ—Å</b>: {data[chan]['spread']}%\n"
            f"<b>–≠–º–æ–¥–∑–∏</b>: {data[chan].get('emoji', 'N/A')}")


def ListAccountNumbers() -> str:
    res = ''
    for i, acc in enumerate(source.ACCOUNTS):
        res += f'{i + 1} | {split(acc.session.filename)[-1][:-8]}\n'
    return res
