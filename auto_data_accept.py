import source
from source import (AUTO_BTNS, CANCEL_BTN, WELCOME_BTNS, AUTO_CHOICE, LINK_FORMAT,
                    MAX_MINS, TIME_FORMAT, BOT, FILE_AUTO_VIEWS, FILE_AUTO_REAC, FILE_AUTO_REPS)
from common import ShowButtons, Stamp
from file import SaveRequestsToFile
from deletion import DeleteAutomaticRequest
from info_senders import SendAutomaticRequests
# ---
from re import match
from datetime import datetime
# ---
from telebot.types import Message
from emoji import EMOJI_DATA


def AutomaticChoice(message: Message) -> None:
    if message.text == AUTO_CHOICE[0]:
        ShowButtons(message, AUTO_BTNS, '‚ùî –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:')
        BOT.register_next_step_handler(message, AutomaticChannelDispatcher, FILE_AUTO_VIEWS)
    elif message.text == AUTO_CHOICE[1]:
        ShowButtons(message, AUTO_BTNS, '‚ùî –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:')
        BOT.register_next_step_handler(message, AutomaticChannelDispatcher, FILE_AUTO_REPS)
    elif message.text == AUTO_CHOICE[2]:
        ShowButtons(message, CANCEL_BTN, '‚ùî –û—Ç–ø—Ä–∞–≤—å—Ç–µ —ç–º–æ–¥–∑–∏:')
        BOT.register_next_step_handler(message, AutomaticAcceptEmoji)
    elif message.text == AUTO_CHOICE[3]:
        ShowButtons(message, WELCOME_BTNS, '‚ùî –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:')
    else:
        BOT.send_message(message.from_user.id, '‚ùå –Ø –≤–∞—Å –Ω–µ –ø–æ–Ω—è–ª...')
        ShowButtons(message, WELCOME_BTNS, '‚ùî –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:')


def AutomaticAcceptEmoji(message: Message) -> None:
    Stamp('Emoji inserting procedure', 'i')
    if message.text not in EMOJI_DATA:
        if message.text == CANCEL_BTN[0]:
            ShowButtons(message, WELCOME_BTNS, '‚ùî –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:')
        else:
            ShowButtons(message, CANCEL_BTN, "‚ùå –í—ã –≤–≤–µ–ª–∏ –Ω–µ —ç–º–æ–¥–∑–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —ç–º–æ–¥–∑–∏")
            BOT.register_next_step_handler(message, AutomaticAcceptEmoji)
    else:
        ShowButtons(message, AUTO_BTNS, '‚ùî –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:')
        BOT.register_next_step_handler(message, AutomaticChannelDispatcher, FILE_AUTO_REAC)


def AutomaticChannelDispatcher(message: Message, file: str) -> None:
    if message.text == AUTO_BTNS[0]:
        ShowButtons(message, CANCEL_BTN, '‚ùî –í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞–Ω–∞–ª (https://t.me/name –∏–ª–∏ @name):')
        BOT.register_next_step_handler(message, AutomaticChannelAction, file)
    elif message.text == AUTO_BTNS[1]:
        BOT.send_message(message.from_user.id, '‚ùî –í–≤–µ–¥–∏—Ç–µ –∏–º—è –∫–∞–Ω–∞–ª–∞ (name):')
        BOT.register_next_step_handler(message, DeleteAutomaticRequest, file)
    elif message.text == AUTO_BTNS[2]:
        FILE_TO_DATA_MAP = {
            source.FILE_AUTO_VIEWS: source.AUTO_VIEWS_DICT,
            source.FILE_AUTO_REPS: source.AUTO_REPS_DICT,
            source.FILE_AUTO_REAC: source.AUTO_REAC_DICT,
        }
        data = FILE_TO_DATA_MAP.get(file)
        SendAutomaticRequests(message, data)
        ShowButtons(message, AUTO_BTNS, '‚ùî –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:')
        BOT.register_next_step_handler(message, AutomaticChannelDispatcher, file)
    elif message.text == AUTO_BTNS[3]:
        ShowButtons(message, WELCOME_BTNS, '‚ùî –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:')
    else:
        BOT.send_message(message.from_user.id, '‚ùå –Ø –≤–∞—Å –Ω–µ –ø–æ–Ω—è–ª...')
        ShowButtons(message, WELCOME_BTNS, '‚ùî –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:')


def AutomaticChannelAction(message: Message, file: str, emoji: str = None) -> None:
    Stamp('Automatic channel link inserting procedure', 'i')
    if message.text == CANCEL_BTN[0]:
        ShowButtons(message, WELCOME_BTNS, '‚ùî –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:')
    elif not message.text[0] == '@' and not match(LINK_FORMAT, message.text):
        ShowButtons(message, CANCEL_BTN, "‚ùå –°—Å—ã–ª–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª –Ω–µ –ø–æ—Ö–æ–∂–∞ –Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é. "
                                         "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç —Å—Å—ã–ª–∫–∏ "
                                         "(https://t.me/name –∏–ª–∏ @name)")
        BOT.register_next_step_handler(message, AutomaticChannelAction, file)
    else:
        source.CUR_REQ = {'initiator': f'{message.from_user.username} ‚Äì {message.from_user.id}'}
        if emoji:
            source.CUR_REQ['emoji'] = emoji
        cut_link = message.text.split('/')[-1]
        if cut_link[0] == '@':
            cut_link = cut_link[1:]
        source.CUR_REQ['link'] = cut_link
        ShowButtons(message, CANCEL_BTN, f'‚ùî –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ '
                                         f'–±—É–¥—É—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–≤–µ—Ä—à–∞—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ —Å –Ω–æ–≤–æ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–µ–π '
                                         f'(–¥–æ—Å—Ç—É–ø–Ω–æ {len(source.ACCOUNTS)} –∞–∫–∫–∞—É–Ω—Ç–æ–≤):')
        BOT.register_next_step_handler(message, AutomaticNumberProcedure, file)


def AutomaticNumberProcedure(message: Message, file: str) -> None:
    Stamp('Automatic number inserting procedure', 'i')
    try:
        if message.text == CANCEL_BTN[0]:
            ShowButtons(message, WELCOME_BTNS, '‚ùî –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:')
        else:
            if 0 < int(message.text) <= len(source.ACCOUNTS):
                source.CUR_REQ['annual'] = int(message.text)
                ShowButtons(message, CANCEL_BTN, "‚ùî –í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–µ–∂—É—Ç–æ–∫ –≤—Ä–µ–º–µ–Ω–∏ (–≤ –º–∏–Ω—É—Ç–∞—Ö), –æ—Ç–≤–µ–¥—ë–Ω–Ω—ã–π –Ω–∞ –¥–µ–π—Å—Ç–≤–∏–µ")
                BOT.register_next_step_handler(message, AutomaticPeriod, file)
            else:
                ShowButtons(message, CANCEL_BTN, "‚ùå –í–≤–µ–¥–µ–Ω–æ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑:")
                BOT.register_next_step_handler(message, AutomaticNumberProcedure, file)
    except ValueError:
        ShowButtons(message, CANCEL_BTN, "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑:")
        BOT.register_next_step_handler(message, AutomaticNumberProcedure, file)


def AutomaticPeriod(message: Message, path: str) -> None:
    Stamp('Automatic time inserting procedure', 'i')
    try:
        if message.text == CANCEL_BTN[0]:
            ShowButtons(message, WELCOME_BTNS, '‚ùî –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:')
        else:
            if 0 < int(message.text) < MAX_MINS:
                source.CUR_REQ['time_limit'] = int(message.text)
                BOT.send_message(message.from_user.id, '‚ùî –í–≤–µ–¥–∏—Ç–µ —Ä–∞–∑–±—Ä–æ—Å (–≤ %, –æ—Ç 0 –¥–æ 100), —Å –∫–æ—Ç–æ—Ä—ã–º —Ä–∞—Å—Å—á–∏—Ç–∞–µ—Ç—Å—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:')
                BOT.register_next_step_handler(message, InsertSpread, path)
            else:
                ShowButtons(message, CANCEL_BTN, "‚ùå –í–≤–µ–¥–µ–Ω–æ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑:")
                BOT.register_next_step_handler(message, AutomaticPeriod, path)
    except ValueError:
        ShowButtons(message, CANCEL_BTN, "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑:")
        BOT.register_next_step_handler(message, AutomaticPeriod, path)


def InsertSpread(message: Message, path: str) -> None:
    Stamp('Automatic spread inserting procedure', 'i')
    try:
        if message.text == CANCEL_BTN[0]:
            ShowButtons(message, WELCOME_BTNS, '‚ùî –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:')
            return
        if not 0 <= int(message.text) < 100:
            ShowButtons(message, CANCEL_BTN, "‚ùå –í–≤–µ–¥–µ–Ω–æ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑:")
            BOT.register_next_step_handler(message, InsertSpread, path)
            return
        PATH_TO_DATA_MAP = {
            FILE_AUTO_VIEWS: (source.AUTO_VIEWS_DICT, 'automatic views', FILE_AUTO_VIEWS),
            FILE_AUTO_REPS: (source.AUTO_REPS_DICT, 'automatic reposts', FILE_AUTO_REPS),
            FILE_AUTO_REAC: (source.AUTO_REAC_DICT, 'automatic reactions', FILE_AUTO_REAC)
        }
        data_info = PATH_TO_DATA_MAP.get(path)
        if not data_info:
            BOT.send_message(message.from_user.id, '‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø—É—Ç—å —Ñ–∞–π–ª–∞.')
            ShowButtons(message, WELCOME_BTNS, '‚ùî –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:')
            return
        data_dict, description, file_name = data_info
        record = {
            'initiator': source.CUR_REQ['initiator'],
            'time_limit': source.CUR_REQ['time_limit'],
            'approved': datetime.now().strftime(TIME_FORMAT),
            'annual': source.CUR_REQ['annual'],
            'spread': int(message.text)
        }
        link = source.CUR_REQ['link']
        if 'emoji' in source.CUR_REQ:
            record['emoji'] = source.CUR_REQ['emoji']
            link += '_' + source.CUR_REQ['emoji']
        data_dict[link] = record
        SaveRequestsToFile(data_dict, description, file_name)
        BOT.send_message(message.from_user.id, f"üÜó –ó–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞. –ë—É–¥—É —Å–ª–µ–¥–∏—Ç—å –∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏ –≤ –∫–∞–Ω–∞–ª–µ {source.CUR_REQ['link']}...")
        ShowButtons(message, WELCOME_BTNS, '‚ùî –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:')
    except ValueError:
        ShowButtons(message, CANCEL_BTN, "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑:")
        BOT.register_next_step_handler(message, InsertSpread, path)
