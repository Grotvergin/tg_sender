import source
from source import (SINGLE_BTNS, CANCEL_BTN, WELCOME_BTNS, NUMBER_LAST_FIN,
                    LINK_FORMAT, TIME_FORMAT, MAX_MINS, FILE_FINISHED, BOT, FILE_ACTIVE)
from common import ShowButtons, Stamp
from info_senders import SendRequests
from file import LoadRequestsFromFile, SaveRequestsToFile
from deletion import DeleteSingleRequest
# ---
from re import match
from random import randint
from datetime import datetime, timedelta
# ---
from telebot.types import Message
from emoji import EMOJI_DATA


def SingleChoice(message: Message) -> None:
    if message.text == SINGLE_BTNS[0]:
        SendRequests(message, source.REQS_QUEUE)
        ShowButtons(message, SINGLE_BTNS, '‚ùî –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:')
        BOT.register_next_step_handler(message, SingleChoice)
    elif message.text == SINGLE_BTNS[1]:
        reqs = LoadRequestsFromFile('finished', FILE_FINISHED)
        SendRequests(message, reqs, amount=NUMBER_LAST_FIN)
        ShowButtons(message, SINGLE_BTNS, '‚ùî –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:')
        BOT.register_next_step_handler(message, SingleChoice)
    elif message.text == SINGLE_BTNS[2]:
        ShowButtons(message, CANCEL_BTN, '‚ùî –í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞–Ω–∞–ª (https://t.me/name_or_hash –∏–ª–∏ @name):')
        BOT.register_next_step_handler(message, ChannelSub)
    elif message.text == SINGLE_BTNS[3]:
        ShowButtons(message, CANCEL_BTN, '‚ùî –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –ø–æ—Å—Ç (https://t.me/name/post_id):')
        BOT.register_next_step_handler(message, AcceptPost, '–ü—Ä–æ—Å–º–æ—Ç—Ä—ã')
    elif message.text == SINGLE_BTNS[4]:
        ShowButtons(message, CANCEL_BTN, '‚ùî –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –ø–æ—Å—Ç (https://t.me/name/post_id):')
        BOT.register_next_step_handler(message, AcceptPost, '–†–µ–ø–æ—Å—Ç—ã')
    elif message.text == SINGLE_BTNS[5]:
        ShowButtons(message, CANCEL_BTN, '‚ùî –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É —Ç–∞–∫, –∫–∞–∫ –æ–Ω–∞ —É–∫–∞–∑–∞–Ω–∞ –≤ –≤—ã–≤–æ–¥–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞—è–≤–æ–∫:')
        BOT.register_next_step_handler(message, DeleteSingleRequest, SingleChoice)
    elif message.text == SINGLE_BTNS[6]:
        ShowButtons(message, CANCEL_BTN, '‚ùî –û—Ç–ø—Ä–∞–≤—å—Ç–µ —ç–º–æ–¥–∑–∏:')
        BOT.register_next_step_handler(message, AcceptEmoji)
    elif message.text == SINGLE_BTNS[-1]:
        ShowButtons(message, WELCOME_BTNS, '‚ùî –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:')
    else:
        BOT.send_message(message.from_user.id, '‚ùå –Ø –≤–∞—Å –Ω–µ –ø–æ–Ω—è–ª...')
        ShowButtons(message, SINGLE_BTNS, '‚ùî –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:')
        BOT.register_next_step_handler(message, SingleChoice)


def RequestPeriod(message: Message) -> None:
    Stamp('Time inserting procedure', 'i')
    try:
        if message.text == CANCEL_BTN[0]:
            ShowButtons(message, WELCOME_BTNS, '‚ùî –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:')
        else:
            if 0 < int(message.text) < MAX_MINS:
                source.CUR_REQ['start'] = datetime.now().strftime(TIME_FORMAT)
                source.CUR_REQ['finish'] = (datetime.now() + timedelta(minutes=int(message.text))).strftime(TIME_FORMAT)
                source.CUR_REQ['cur_acc_index'] = randint(0, len(source.ACCOUNTS) - 1)
                source.REQS_QUEUE.append(source.CUR_REQ)
                SaveRequestsToFile(source.REQS_QUEUE, 'active', FILE_ACTIVE)
                BOT.send_message(message.from_user.id, "üÜó –ó–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞. –ù–∞—á–∏–Ω–∞—é –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏...")
                ShowButtons(message, WELCOME_BTNS, '‚ùî –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:')
            else:
                ShowButtons(message, CANCEL_BTN, "‚ùå –í–≤–µ–¥–µ–Ω–æ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑:")
                BOT.register_next_step_handler(message, RequestPeriod)
    except ValueError:
        ShowButtons(message, CANCEL_BTN, "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑:")
        BOT.register_next_step_handler(message, RequestPeriod)


def NumberInsertingProcedure(message: Message) -> None:
    Stamp('Number inserting procedure', 'i')
    try:
        if message.text == CANCEL_BTN[0]:
            ShowButtons(message, WELCOME_BTNS, '‚ùî –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:')
        else:
            if 0 < int(message.text) <= len(source.ACCOUNTS):
                source.CUR_REQ['planned'] = int(message.text)
                ShowButtons(message, CANCEL_BTN, "‚ùî –í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–µ–∂—É—Ç–æ–∫ –≤—Ä–µ–º–µ–Ω–∏ (–≤ –º–∏–Ω—É—Ç–∞—Ö), "
                                                 "–≤ —Ç–µ—á–µ–Ω–∏–µ –∫–æ—Ç–æ—Ä–æ–≥–æ –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è –∑–∞—è–≤–∫–∞:")
                BOT.register_next_step_handler(message, RequestPeriod)
            else:
                ShowButtons(message, CANCEL_BTN, "‚ùå –í–≤–µ–¥–µ–Ω–æ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑:")
                BOT.register_next_step_handler(message, NumberInsertingProcedure)
    except ValueError:
        ShowButtons(message, CANCEL_BTN, "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑:")
        BOT.register_next_step_handler(message, NumberInsertingProcedure)


def ChannelSub(message: Message) -> None:
    Stamp('Channel link inserting procedure', 'i')
    if message.text == CANCEL_BTN[0]:
        ShowButtons(message, WELCOME_BTNS, '‚ùî –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:')
    elif not message.text[0] == '@' and not match(LINK_FORMAT, message.text):
        ShowButtons(message, CANCEL_BTN, "‚ùå –°—Å—ã–ª–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª –Ω–µ –ø–æ—Ö–æ–∂–∞ –Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é. "
                                         "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç —Å—Å—ã–ª–∫–∏ "
                                         "(https://t.me/name_or_hash –∏–ª–∏ @name)")
        BOT.register_next_step_handler(message, ChannelSub)
    else:
        source.CUR_REQ = {'order_type': '–ü–æ–¥–ø–∏—Å–∫–∞', 'initiator': f'{message.from_user.username} ‚Äì {message.from_user.id}'}
        cut_link = message.text.split('/')[-1]
        if cut_link[0] == '@':
            source.CUR_REQ['channel_type'] = 'public'
            cut_link = cut_link[1:]
        elif cut_link[0] == '+':
            cut_link = cut_link[1:]
            source.CUR_REQ['channel_type'] = 'private'
        else:
            source.CUR_REQ['channel_type'] = 'public'
        source.CUR_REQ['link'] = cut_link
        ShowButtons(message, CANCEL_BTN, f'‚ùî –í–≤–µ–¥–∏—Ç–µ –∂–µ–ª–∞–µ–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–ø–∏—Å–æ–∫'
                                         f'(–¥–æ—Å—Ç—É–ø–Ω–æ {len(source.ACCOUNTS)} –∞–∫–∫–∞—É–Ω—Ç–æ–≤):')
        BOT.register_next_step_handler(message, NumberInsertingProcedure)


def AcceptEmoji(message: Message) -> None:
    Stamp('Emoji inserting procedure', 'i')
    if message.text not in EMOJI_DATA:
        if message.text == CANCEL_BTN[0]:
            ShowButtons(message, WELCOME_BTNS, '‚ùî –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:')
        else:
            ShowButtons(message, CANCEL_BTN, "‚ùå –í—ã –≤–≤–µ–ª–∏ –Ω–µ —ç–º–æ–¥–∑–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —ç–º–æ–¥–∑–∏")
            BOT.register_next_step_handler(message, AcceptEmoji)
    else:
        ShowButtons(message, CANCEL_BTN, '‚ùî –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –ø–æ—Å—Ç (https://t.me/name/post_id):')
        BOT.register_next_step_handler(message, AcceptPost, '–†–µ–∞–∫—Ü–∏–∏', message.text)


def AcceptPost(message: Message, order_type: str, emoji: str = None) -> None:
    Stamp('Post link inserting procedure', 'i')
    if not match(LINK_FORMAT, message.text):
        if message.text == CANCEL_BTN[0]:
            ShowButtons(message, WELCOME_BTNS, '‚ùî –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:')
        else:
            ShowButtons(message, CANCEL_BTN, "‚ùå –°—Å—ã–ª–∫–∞ –Ω–∞ –ø–æ—Å—Ç –Ω–µ –ø–æ—Ö–æ–∂–∞ –Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é. "
                                             "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç —Å—Å—ã–ª–∫–∏ (https://t.me/name/post_id)")
            BOT.register_next_step_handler(message, AcceptPost, order_type)
    else:
        cut_link = '/'.join(message.text.split('/')[-2:])
        source.CUR_REQ = {'order_type': order_type, 'initiator': f'{message.from_user.username} ‚Äì {message.from_user.id}', 'link': cut_link}
        if emoji:
            source.CUR_REQ['emoji'] = emoji
        ShowButtons(message, CANCEL_BTN, f'‚ùî –í–≤–µ–¥–∏—Ç–µ –∂–µ–ª–∞–µ–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ (–¥–æ—Å—Ç—É–ø–Ω–æ {len(source.ACCOUNTS)} –∞–∫–∫–∞—É–Ω—Ç–æ–≤):')
        BOT.register_next_step_handler(message, NumberInsertingProcedure)
