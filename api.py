import source
from emulator import PressButton, PrepareDriver, IsElementPresent, ExtractCodeFromMessage
from headers_agents import HEADERS
from source import (URL_API_GET_CODE, URL_API_LOGIN, URL_API_CREATE_APP,
                    MAX_WAIT_CODE, URL_API_GET_APP, BOT, LONG_SLEEP, WELCOME_BTNS)
from generator import GenerateRandomWord
from common import Stamp, Sleep, ControlRecursion, ShowButtons
# ---
from re import search, IGNORECASE
from datetime import datetime
# ---
from requests import Session
from telebot.types import Message
from appium.webdriver.common.appiumby import AppiumBy
from bs4 import BeautifulSoup


def SendAPICode(message: Message, num: str) -> None:
    Stamp('Sending request to authorize on API', 'i')
    BOT.send_message(message.from_user.id, f'üìÆ –û—Ç–ø—Ä–∞–≤–ª—è—é –∫–æ–¥ –Ω–∞ –Ω–æ–º–µ—Ä {num} –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ API')
    try:
        session, rand_hash = RequestAPICode(message, num)
    except RecursionError:
        Stamp(f'Exiting because of requesting code fail', 'w')
        BOT.send_message(message.from_user.id, '‚ùóÔ∏è –ü—Ä–µ–≤—ã—à–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫,'
                                               '–∑–∞–≤–µ—Ä—à–∞—é –ø—Ä–æ—Ü–µ—Å—Å –ø–æ–∫—É–ø–∫–∏...')
        return
    Sleep(10)
    start_time = datetime.now()
    driver = PrepareDriver()
    code = None
    PressButton(driver, 'new UiSelector().className("android.view.ViewGroup").index(0)', 'Chat', 3, by=AppiumBy.ANDROID_UIAUTOMATOR)
    while (datetime.now() - start_time).seconds < MAX_WAIT_CODE:
        if IsElementPresent(driver, 'new UiSelector().textContains("–ö–æ–¥")', by=AppiumBy.ANDROID_UIAUTOMATOR):
            code = ExtractCodeFromMessage(driver)
            Stamp(f'API code received for number {num}: {code}', 's')
            BOT.send_message(message.from_user.id, f'‚ú≥Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω –∫–æ–¥: {code}')
            break
        Sleep(1)
    if not code:
        Stamp('No API code received', 'e')
        BOT.send_message(message.from_user.id, '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ–¥ –¥–ª—è API, –∑–∞–≤–µ—Ä—à–∞—é –ø—Ä–æ—Ü–µ—Å—Å –ø–æ–∫—É–ø–∫–∏...')
        return
    HandleAPICode(message, session, num, rand_hash, code)


@ControlRecursion
def RequestAPICode(message: Message, num: str) -> (Session, str):
    session = Session()
    try:
        response = session.post(URL_API_GET_CODE, headers=HEADERS, data={'phone': num})
    except ConnectionError as e:
        Stamp(f'Failed to connect to the server while requesting API code: {e}', 'e')
        BOT.send_message(message.from_user.id, f'‚ÄºÔ∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≤—è–∑–∞—Ç—å—Å—è —Å API –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –∫–æ–¥–∞, '
                                               f'–ø—Ä–æ–±—É—é –µ—â—ë —Ä–∞–∑ –ø—Ä–∏–º–µ—Ä–Ω–æ —á–µ—Ä–µ–∑ {LONG_SLEEP} —Å–µ–∫—É–Ω–¥...')
        Sleep(LONG_SLEEP, 0.5)
        session, rand_hash = RequestAPICode(message, num)
    else:
        if str(response.status_code)[0] == '2':
            Stamp(f'Sent API code to {num}', 's')
            BOT.send_message(message.from_user.id, f'üí¨ –ö–æ–¥ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ API –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ {num}')
            rand_hash = response.json()['random_hash']
        else:
            Stamp(f'Failed to send API code to {num}: {response.text}', 'e')
            BOT.send_message(message.from_user.id, f'‚ÄºÔ∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—Ä–æ—Å–∏—Ç—å –∫–æ–¥ –¥–ª—è API, '
                                                   f'–ø—Ä–æ–±—É—é –µ—â—ë —Ä–∞–∑ –ø—Ä–∏–º–µ—Ä–Ω–æ —á–µ—Ä–µ–∑ {LONG_SLEEP} —Å–µ–∫—É–Ω–¥...')
            Sleep(LONG_SLEEP, 0.5)
            session, rand_hash = RequestAPICode(message, num)
    return session, rand_hash


def HandleAPICode(message: Message, session: Session, num: str, rand_hash: str, code: str) -> None:
    try:
        session = LoginAPI(message, session, num, rand_hash, code)
    except RecursionError as e:
        Stamp(f'Failed to login into API: {e}', 'e')
        BOT.send_message(message.from_user.id, f'üö´ –ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –≤ API —Å –Ω–æ–º–µ—Ä–∞ {num}, '
                                               f'–ø–µ—Ä–µ—Ö–æ–∂—É –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –Ω–æ–º–µ—Ä—É...')
        return
    Stamp(f'Getting hash for account {num}', 'i')
    BOT.send_message(message.from_user.id, f'üîë –ü–æ–ª—É—á–∞—é —Ö–µ—à –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ {num}')
    try:
        cur_hash = GetHash(message, session)
    except RecursionError as e:
        Stamp(f'Failed to get hash: {e}', 'e')
        BOT.send_message(message.from_user.id, f'‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ö–µ—à –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ {num}, '
                                               f'–∑–∞–≤–µ—Ä—à–∞—é –ø—Ä–æ—Ü–µ—Å—Å –ø–æ–∫—É–ø–∫–∏...')
        return
    FinalStep(message, session, num, cur_hash)


@ControlRecursion
def LoginAPI(message: Message, session: Session, num: str, rand_hash: str, code: str) -> Session:
    data = {
        'phone': num,
        'random_hash': rand_hash,
        'password': code,
    }
    try:
        response = session.post(URL_API_LOGIN, headers=HEADERS, data=data)
    except ConnectionError as e:
        Stamp(f'Failed to connect to the server during API login: {e}', 'e')
        BOT.send_message(message.from_user.id, f'‚ÄºÔ∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≤—è–∑–∞—Ç—å—Å—è —Å API –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏, '
                                               f'–ø—Ä–æ–±—É—é –µ—â—ë —Ä–∞–∑ –ø—Ä–∏–º–µ—Ä–Ω–æ —á–µ—Ä–µ–∑ {LONG_SLEEP} —Å–µ–∫—É–Ω–¥...')
        Sleep(LONG_SLEEP, 0.5)
        session = LoginAPI(message, session, num, rand_hash, code)
    else:
        if str(response.status_code)[0] == '2':
            Stamp(f'Logined into API for number {num}', 's')
            BOT.send_message(message.from_user.id, f'‚ùáÔ∏è –ó–∞—à—ë–ª –≤ API –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ {num}')
        else:
            Stamp(f'Failed to login into API: {response.text}', 'e')
            BOT.send_message(message.from_user.id, f'üõë –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–π—Ç–∏ –≤ API –¥–ª—è –Ω–æ–º–µ—Ä–∞ {num}, '
                                                   f'–ø—Ä–æ–±—É—é –µ—â—ë —Ä–∞–∑ –ø—Ä–∏–º–µ—Ä–Ω–æ —á–µ—Ä–µ–∑ {LONG_SLEEP} —Å–µ–∫—É–Ω–¥...')
            Sleep(LONG_SLEEP, 0.5)
            session = LoginAPI(message, session, num, rand_hash, code)
    return session


def GetHash(message: Message, session: Session) -> str:
    try:
        response = session.get(URL_API_GET_APP, headers=HEADERS)
    except ConnectionError as e:
        Stamp(f'Failed to connect to the server during hash requesting: {e}', 'e')
        BOT.send_message(message.from_user.id, f'‚ÄºÔ∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≤—è–∑–∞—Ç—å—Å—è —Å —Å–∞–π—Ç–æ–º –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ö–µ—à–∞, '
                                               f'–ø—Ä–æ–±—É—é –µ—â—ë —Ä–∞–∑ –ø—Ä–∏–º–µ—Ä–Ω–æ —á–µ—Ä–µ–∑ {LONG_SLEEP} —Å–µ–∫—É–Ω–¥...')
        Sleep(LONG_SLEEP, 0.5)
        cur_hash = GetHash(message, session)
    else:
        if str(response.status_code)[0] == '2':
            Stamp(f'Got HTML page for hash', 's')
            BOT.send_message(message.from_user.id, f'‚ôªÔ∏è –ü–æ–ª—É—á–∏–ª —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å–∞–π—Ç–∞, –∏—â—É –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ')
            cur_hash = ParseHash(message, response.text)
        else:
            Stamp('Did not got HTML page for hash', 'e')
            BOT.send_message(message.from_user.id, f'üìõ –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å–∞–π—Ç–∞ —Å —Ö–µ—à–µ–º, '
                                                   f'–ø—Ä–æ–±—É—é –µ—â—ë —Ä–∞–∑ –ø—Ä–∏–º–µ—Ä–Ω–æ —á–µ—Ä–µ–∑ {LONG_SLEEP} —Å–µ–∫—É–Ω–¥...')
            Sleep(LONG_SLEEP, 0.5)
            cur_hash = GetHash(message, session)
    return cur_hash


def ParseHash(message: Message, page: str) -> str | None:
    Stamp('Parsing hash from HTML page', 'i')
    BOT.send_message(message.from_user.id, 'üîç –ò—â—É —Ö–µ—à –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ...')
    soup = BeautifulSoup(page, 'html.parser')
    hash_input = soup.find('input', {'name': 'hash'})
    if hash_input:
        BOT.send_message(message.from_user.id, f'‚úÖ –ù–∞—à—ë–ª —Ö–µ—à: {hash_input.get("value")}')
        Stamp(f'Got hash: {hash_input.get("value")}', 's')
        return hash_input.get('value')
    Stamp('Did not got hash', 'e')
    BOT.send_message(message.from_user.id, '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ö–µ—à –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ')
    return None


def FinalStep(message: Message, session: Session, num: str, cur_hash: str) -> None:
    Stamp(f'Creating app for account {num}', 'i')
    BOT.send_message(message.from_user.id, f'üî® –°–æ–∑–¥–∞—é –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ {num}')
    try:
        CreateApp(message, session, num, cur_hash)
    except RecursionError as e:
        Stamp(f'Failed to create app: {e}', 'e')
        BOT.send_message(message.from_user.id, f'üìõ –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ {num}')
        return
    BOT.send_message(message.from_user.id, f'‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ {num}, –∂–¥—É {LONG_SLEEP} —Å–µ–∫—É–Ω–¥...')
    Sleep(LONG_SLEEP)
    Stamp(f'Getting HTML page for number {num}', 'i')
    BOT.send_message(message.from_user.id, f'‚è© –ü–æ–ª—É—á–∞—é –¥–∞–Ω–Ω—ã–µ –æ–± API_ID –∏ API_HASH...')
    try:
        api_id, api_hash = GetAppData(message, session)
    except RecursionError:
        Stamp(f'Exiting because of getting app data fail', 'w')
        BOT.send_message(message.from_user.id, '‚ùóÔ∏è –ü—Ä–µ–≤—ã—à–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫,'
                                               '–∑–∞–≤–µ—Ä—à–∞—é –ø—Ä–æ—Ü–µ—Å—Å –ø–æ–∫—É–ø–∫–∏...')
        return
    Stamp(f'Got api_id: {api_id} and api_hash: {api_hash} for number {num}', 's')
    BOT.send_message(message.from_user.id, f'‚úÖ –ü–æ–ª—É—á–∏–ª –¥–∞–Ω–Ω—ã–µ –¥–ª—è –Ω–æ–º–µ—Ä–∞ {num}:\n'
                                           f'API_ID: {api_id}\n'
                                           f'API_HASH: {api_hash}\n'
                                           f'‚ñ∂Ô∏è –ù–∞—á–∏–Ω–∞—é –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –∏ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞...')
    source.ACC_TO_CHANGE = num + '|' + api_id + '|' + api_hash
    ShowButtons(message, WELCOME_BTNS, '‚ùî –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:')


def CreateApp(message: Message, session: Session, num: str, cur_hash: str) -> None:
    data = {
        'hash': cur_hash,
        'app_title': GenerateRandomWord(10),
        'app_shortname': GenerateRandomWord(7),
        'app_url': '',
        'app_platform': 'android',
        'app_desc': '',
    }
    try:
        response = session.post(URL_API_CREATE_APP, headers=HEADERS, data=data)
    except ConnectionError as e:
        Stamp(f'Failed to connect to the server during app creation: {e}', 'e')
        BOT.send_message(message.from_user.id, f'‚ÄºÔ∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≤—è–∑–∞—Ç—å—Å—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è, '
                                               f'–ø–µ—Ä–µ—Ö–æ–∂—É –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –Ω–æ–º–µ—Ä—É...')
    else:
        if str(response.status_code)[0] == '2':
            Stamp(f'App created for number {num}', 's')
            BOT.send_message(message.from_user.id, f'üîß –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ –¥–ª—è –Ω–æ–º–µ—Ä–∞ {num}')
        else:
            Stamp(f'Failed to create app for number {num}: {response.text}', 'e')
            BOT.send_message(message.from_user.id, f'üìõ –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –Ω–æ–º–µ—Ä–∞ {num}')


@ControlRecursion
def GetAppData(message: Message, session: Session) -> (str, str):
    try:
        response = session.get(URL_API_GET_APP, headers=HEADERS)
    except ConnectionError as e:
        Stamp(f'Failed to connect to the server during app data requesting: {e}', 'e')
        BOT.send_message(message.from_user.id, f'‚ÄºÔ∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≤—è–∑–∞—Ç—å—Å—è —Å —Å–∞–π—Ç–æ–º –¥–∞–Ω–Ω—ã—Ö –æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏, '
                                               f'–ø—Ä–æ–±—É—é –µ—â—ë —Ä–∞–∑ –ø—Ä–∏–º–µ—Ä–Ω–æ —á–µ—Ä–µ–∑ {LONG_SLEEP} —Å–µ–∫—É–Ω–¥...')
        Sleep(LONG_SLEEP, 0.5)
        api_id, api_hash = GetAppData(message, session)
    else:
        if str(response.status_code)[0] == '2':
            Stamp(f'Got HTML page', 's')
            BOT.send_message(message.from_user.id, f'‚ôªÔ∏è –ü–æ–ª—É—á–∏–ª —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å–∞–π—Ç–∞, –∏—â—É –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ')
            api_id, api_hash = ParseReadyHTML(response.text)
        else:
            Stamp('Did not got HTML page', 'e')
            BOT.send_message(message.from_user.id, f'üìõ –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å–∞–π—Ç–∞ —Å API_ID –∏ API_HASH, '
                                                   f'–ø—Ä–æ–±—É—é –µ—â—ë —Ä–∞–∑ –ø—Ä–∏–º–µ—Ä–Ω–æ —á–µ—Ä–µ–∑ {LONG_SLEEP} —Å–µ–∫—É–Ω–¥...')
            Sleep(LONG_SLEEP, 0.5)
            api_id, api_hash = GetAppData(message, session)
    return api_id, api_hash


def ParseReadyHTML(page: str) -> (str, str):
    api_id_pattern = r'<label for="app_id" class="col-md-4 text-right control-label">App api_id:</label>\s*<div class="col-md-7">\s*<span class="form-control input-xlarge uneditable-input"[^>]*><strong>(\d+)</strong></span>'
    api_hash_pattern = r'<label for="app_hash" class="col-md-4 text-right control-label">App api_hash:</label>\s*<div class="col-md-7">\s*<span class="form-control input-xlarge uneditable-input"[^>]*>([a-f0-9]{32})</span>'
    api_id_match = search(api_id_pattern, page, IGNORECASE)
    api_hash_match = search(api_hash_pattern, page, IGNORECASE)
    api_id = api_id_match.group(1) if api_id_match else '–ù–µ –Ω–∞—à—ë–ª!'
    api_hash = api_hash_match.group(1) if api_hash_match else '–ù–µ –Ω–∞—à—ë–ª!'
    return api_id, api_hash
