import source
from source import (CANCEL_BTN, WELCOME_BTNS, BOT, LEFT_CORNER, RIGHT_CORNER,
                    LONG_SLEEP, URL_BUY, MAX_ACCOUNTS_BUY, URL_CANCEL,
                    URL_SMS, URL_GET_TARIFFS, MAX_WAIT_CODE, SHORT_SLEEP)
from common import (ShowButtons, Sleep, Stamp, ControlRecursion, ErrorAfterNumberInsertion,
                    PasswordRequired, BuildService, GetSector, UploadData)
from api import GetAPICode, RequestAPICode, LoginAPI, GetHash, CreateApp, GetAppData
from emulator import AskForCode, InsertCode, PrepareDriver, SetPassword, PressButton, ExitFromAccount
from secret import TOKEN_SIM, PASSWORD, SHEET_NAME, SHEET_ID
from info_senders import SendTariffInfo
from change import (SetProfileInfo, SetProfilePicture, AddContacts, UpdatePrivacySettings,
                    buyProxy, receiveProxyInfo, emuAuthCallback)
# ---
from asyncio import sleep as async_sleep
from time import time
from os import getcwd
from os.path import join
# ---
from requests import get
from telebot.types import Message
from appium.webdriver import Remote
from telethon.sync import TelegramClient


@ControlRecursion
def GetTariffInfo(message: Message) -> dict:
    try:
        response = get(URL_GET_TARIFFS, params={'apikey': TOKEN_SIM})
    except ConnectionError as e:
        Stamp(f'Failed to connect to the server while getting tariffs: {e}', 'e')
        BOT.send_message(message.from_user.id, f'‚ÄºÔ∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≤—è–∑–∞—Ç—å—Å—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–∞—Ä–∏—Ñ–æ–≤, '
                                               f'–ø—Ä–æ–±—É—é –µ—â—ë —Ä–∞–∑ –ø—Ä–∏–º–µ—Ä–Ω–æ —á–µ—Ä–µ–∑ {LONG_SLEEP} —Å–µ–∫—É–Ω–¥...')
        Sleep(LONG_SLEEP, 0.5)
        data = GetTariffInfo(message, TOKEN_SIM)
    else:
        if str(response.status_code)[0] == '2':
            Stamp('Successfully got tariffs', 's')
            BOT.send_message(message.from_user.id, f'üîÅ –ü–æ–ª—É—á–∏–ª —Ç–∞—Ä–∏—Ñ—ã')
            data = response.json()
        else:
            Stamp(f'Failed to get tariffs: {response.text}', 'w')
            BOT.send_message(message.from_user.id, f'‚ÑπÔ∏è –ü–æ–∫–∞ —á—Ç–æ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–∞—Ä–∏—Ñ—ã, '
                                                    f'–ø—Ä–æ–±—É—é –µ—â—ë —Ä–∞–∑ —á–µ—Ä–µ–∑ {LONG_SLEEP} —Å–µ–∫—É–Ω–¥...')
            Sleep(LONG_SLEEP)
            data = GetTariffInfo(message, TOKEN_SIM)
    return data


def AddAccounts(message: Message) -> None:
    if message.text == CANCEL_BTN[0]:
        ShowButtons(message, WELCOME_BTNS, '‚ùî –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:')
        return
    try:
        req_quantity = int(message.text)
    except ValueError:
        ShowButtons(message, CANCEL_BTN, f'‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ. –í–≤–µ–¥–∏—Ç–µ –æ—Ç 1 –¥–æ {MAX_ACCOUNTS_BUY}:')
        BOT.register_next_step_handler(message, AddAccounts)
        return
    if req_quantity > MAX_ACCOUNTS_BUY or req_quantity <= 0:
        ShowButtons(message, CANCEL_BTN, f'‚ùå –í–≤–µ–¥–µ–Ω–æ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ. –í–≤–µ–¥–∏—Ç–µ –æ—Ç 1 –¥–æ {MAX_ACCOUNTS_BUY}:')
        BOT.register_next_step_handler(message, AddAccounts)
        return
    country_data = GetTariffInfo(message)
    BOT.send_message(message.from_user.id, 'üìå –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∂–µ–ª–∞–µ–º–æ–π —Å—Ç—Ä–∞–Ω—ã:')
    msg, avail_codes = SendTariffInfo(country_data)
    BOT.send_message(message.from_user.id, msg, parse_mode='Markdown')
    BOT.register_next_step_handler(message, ChooseCountry, req_quantity, avail_codes)


def ChooseCountry(message: Message, req_quantity: int, avail_codes: list) -> None:
    if message.text == CANCEL_BTN[0]:
        ShowButtons(message, WELCOME_BTNS, '‚ùî –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:')
        return
    try:
        country_code = int(message.text)
    except ValueError:
        ShowButtons(message, CANCEL_BTN, '‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ –∫–æ–¥ —Å—Ç—Ä–∞–Ω—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, 7):')
        BOT.register_next_step_handler(message, ChooseCountry, req_quantity, avail_codes)
        return
    if country_code not in avail_codes:
        ShowButtons(message, CANCEL_BTN, '‚ùå –í–≤–µ–¥–µ–Ω–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Ç—Ä–∞–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑:')
        BOT.register_next_step_handler(message, ChooseCountry, req_quantity, avail_codes)
        return
    Stamp(f'Chosen country: {message.text}', 'i')
    BOT.send_message(message.from_user.id, f'üîÅ –í—ã–±—Ä–∞–Ω–∞ —Å—Ç—Ä–∞–Ω–∞ {message.text}')
    source.BUYING_INFO = {'user_id': message.from_user.id, 'req_quantity': req_quantity, 'country_code': country_code}


async def CheckRefreshBuy() -> None:
    while True:
        if source.BUYING_INFO:
            await ProcessAccounts(**source.BUYING_INFO)
            source.BUYING_INFO = None
        await async_sleep(SHORT_SLEEP)


async def ProcessAccounts(user_id: int, req_quantity: int, country_code: int) -> None:
    i = 0
    driver = PrepareDriver()
    srv = BuildService()
    while i < req_quantity:
        Stamp(f'Adding {i + 1} account', 'i')
        BOT.send_message(user_id, f'‚ñ´Ô∏è –î–æ–±–∞–≤–ª—è—é {i + 1}-–π –∞–∫–∫–∞—É–Ω—Ç')
        try:
            num, tzid = BuyAccount(user_id, country_code)
            AskForCode(driver, num, user_id, len(str(country_code)))
            code = GetCodeFromSms(driver, user_id, num)
            InsertCode(driver, user_id, code)
            session, rand_hash = RequestAPICode(user_id, num)
            code = GetAPICode(driver, user_id, num)
            LoginAPI(user_id, session, num, rand_hash, code)
            cur_hash = GetHash(user_id, session)
            CreateApp(user_id, session, num, cur_hash)
            api_id, api_hash = GetAppData(user_id, session)
            SetPassword(driver, user_id)
            buyProxy(user_id)
            proxy = receiveProxyInfo(user_id)
            num = num[1:]
            session = join(getcwd(), 'sessions', f'{num}')
            client = TelegramClient(session, api_id, api_hash)
            await client.start(phone=num, password=PASSWORD, code_callback=lambda: emuAuthCallback(driver))
            Stamp(f'Account {num} authorized', 's')
            BOT.send_message(user_id, f'‚úÖ –ê–∫–∫–∞—É–Ω—Ç {num} –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω')
            source.ACCOUNTS.append(client)
            await SetProfileInfo(client, user_id)
            await SetProfilePicture(client, user_id)
            await AddContacts(client, 50, user_id)
            await UpdatePrivacySettings(client, user_id)
            row = len(GetSector(LEFT_CORNER, RIGHT_CORNER, srv, SHEET_NAME, SHEET_ID)) + 2
            UploadData([[num, api_id, api_hash, PASSWORD, proxy[1], proxy[2], proxy[4], proxy[5]]], SHEET_NAME, SHEET_ID, srv, row)
            BOT.send_message(user_id, f'üìä –î–∞–Ω–Ω—ã–µ –¥–ª—è –Ω–æ–º–µ—Ä–∞ {num} –∑–∞–Ω–µ—Å–µ–Ω—ã –≤ —Ç–∞–±–ª–∏—Ü—É')
            ExitFromAccount(driver)
            i += 1
        except ErrorAfterNumberInsertion:
            Stamp(f'Account {i + 1} has problems when requesting code', 'w')
            BOT.send_message(user_id, f'‚ùå –í –∞–∫–∫–∞—É–Ω—Ç–µ {i + 1} –ø—Ä–æ–±–ª–µ–º–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫–æ–¥–∞, –æ—Ç–º–µ–Ω—è—é –∏ –ø–µ—Ä–µ—Ö–æ–∂—É –∫ —Å–ª–µ–¥—É—é—â–µ–º—É...')
            try:
                CancelNumber(user_id, num, tzid)
                continue
            except RecursionError:
                Stamp(f'Exiting because unable to cancel account', 'w')
                BOT.send_message(user_id, '‚ùóÔ∏è –ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –æ—Ç–º–µ–Ω–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç, –∑–∞–≤–µ—Ä—à–∞—é –ø—Ä–æ—Ü–µ—Å—Å...')
                break
        except PasswordRequired:
            Stamp(f'Account {i + 1} requires password', 'w')
            BOT.send_message(user_id, f'‚ùå –ê–∫–∫–∞—É–Ω—Ç {i + 1} —Ç—Ä–µ–±—É–µ—Ç –ø–∞—Ä–æ–ª—å, –ø–µ—Ä–µ—Ö–æ–∂—É –∫ —Å–ª–µ–¥—É—é—â–µ–º—É...')
            continue
        except RecursionError:
            Stamp(f'Exiting because of recursion error', 'w')
            BOT.send_message(user_id, '‚ùóÔ∏è –ó–∞–≤–µ—Ä—à–∞—é –ø—Ä–æ—Ü–µ—Å—Å –ø–æ–∫—É–ø–∫–∏ –∏–∑-–∑–∞ —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ–π –æ—à–∏–±–∫–∏...')
            break
        except Exception as e:
            Stamp(f'Error while adding accounts: {e}', 'e')
            BOT.send_message(user_id, f'‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–∞ {i + 1}, –∑–∞–≤–µ—Ä—à–∞—é –ø—Ä–æ—Ü–µ—Å—Å...')
            break


@ControlRecursion
def BuyAccount(user_id: int, country_code: int) -> tuple:
    Stamp('Trying to buy account', 'i')
    BOT.send_message(user_id, 'üì≤ –ü–æ–∫—É–ø–∞—é –Ω–æ–º–µ—Ä...')
    try:
        response = get(URL_BUY, params={'apikey': TOKEN_SIM, 'service': 'telegram', 'country': country_code, 'number': True, 'lang': 'ru'})
    except ConnectionError as e:
        Stamp(f'Failed to connect to the server while buying account: {e}', 'e')
        BOT.send_message(user_id, f'‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≤—è–∑–∞—Ç—å—Å—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º –ø–æ–∫—É–ø–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–æ–≤, '
                                               f'–ø—Ä–æ–±—É—é –µ—â—ë —Ä–∞–∑ —á–µ—Ä–µ–∑ {LONG_SLEEP} —Å–µ–∫—É–Ω–¥...')
        Sleep(LONG_SLEEP)
        num, tzid = BuyAccount(user_id)
    else:
        if str(response.status_code)[0] == '2':
            if 'number' in response.json():
                num = response.json()['number']
                tzid = response.json()['tzid']
                Stamp(f'Bought account: {num}', 's')
                BOT.send_message(user_id, f'üì± –ö—É–ø–ª–µ–Ω –Ω–æ–º–µ—Ä {num}')
            else:
                Stamp(f'No "number" field in response <-> no available numbers in this region', 'e')
                BOT.send_message(user_id, '‚õîÔ∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤ –≤ —ç—Ç–æ–º —Ä–µ–≥–∏–æ–Ω–µ, '
                                                       '–ø—Ä–µ–∫—Ä–∞—â–∞—é –ø—Ä–æ—Ü–µ—Å—Å –ø–æ–∫—É–ø–∫–∏...')
                raise
        else:
            Stamp(f'Failed to buy account: {response.text}', 'e')
            BOT.send_message(user_id, f'‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∫—É–ø–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç, '
                                                   f'–ø—Ä–æ–±—É—é –µ—â—ë —Ä–∞–∑ —á–µ—Ä–µ–∑ {LONG_SLEEP} —Å–µ–∫—É–Ω–¥...')
            Sleep(LONG_SLEEP)
            num, tzid = BuyAccount(user_id)
    return num, tzid


@ControlRecursion
def CancelNumber(user_id: int, num: str, tzid: str) -> None:
    try:
        response = get(URL_CANCEL, params={'apikey': TOKEN_SIM, 'tzid': tzid, 'ban': 1, 'lang': 'ru'})
    except ConnectionError as e:
        Stamp(f'Failed to connect to the server while cancelling number {num}: {e}', 'e')
        BOT.send_message(user_id, f'‚ÄºÔ∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≤—è–∑–∞—Ç—å—Å—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º –¥–ª—è –æ—Ç–º–µ–Ω—ã –Ω–æ–º–µ—Ä–∞, '
                                               f'–ø—Ä–æ–±—É—é –µ—â—ë —Ä–∞–∑ –ø—Ä–∏–º–µ—Ä–Ω–æ —á–µ—Ä–µ–∑ {LONG_SLEEP} —Å–µ–∫—É–Ω–¥...')
        Sleep(LONG_SLEEP, 0.5)
        CancelNumber(user_id, num, tzid)
    else:
        if str(response.status_code)[0] == '2' and str(response.json()['response']) == '1':
            Stamp(f'Successful cancelling of number {num}', 's')
            BOT.send_message(user_id, f'‚ùáÔ∏è –ù–æ–º–µ—Ä {num} –æ—Ç–º–µ–Ω—ë–Ω')
        else:
            Stamp(f'Failed to cancel number {num}', 'w')
            BOT.send_message(user_id, f'‚ÑπÔ∏è –ü–æ–∫–∞ —á—Ç–æ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–º–µ–Ω–∏—Ç—å –Ω–æ–º–µ—Ä, '
                                                    f'–ø—Ä–æ–±—É—é –µ—â—ë —Ä–∞–∑ —á–µ—Ä–µ–∑ {LONG_SLEEP * 2} —Å–µ–∫—É–Ω–¥...')
            Sleep(LONG_SLEEP * 2)
            CancelNumber(user_id, num, tzid)


def GetCodeFromSms(driver: Remote, user_id: int, num: str) -> str:
    start_time = time()
    while time() - start_time < MAX_WAIT_CODE:
        sms_dict = CheckAllSms(user_id)
        if sms_dict and num in sms_dict:
            Stamp(f'Found incoming sms for num {num}', 's')
            BOT.send_message(user_id, f'üîî –ù–∞—à—ë–ª –∫–æ–¥: {sms_dict[num]}')
            return sms_dict[num]
        Stamp(f'No incoming sms for {num} after {round(time() - start_time)} seconds of waiting', 'w')
        BOT.send_message(user_id, f'üí§ –ù–µ –≤–∏–∂—É –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ—Å–ª–µ {round(time() - start_time)} —Å–µ–∫—É–Ω–¥ –æ–∂–∏–¥–∞–Ω–∏—è...')
        Sleep(LONG_SLEEP)
    PressButton(driver, '//android.widget.ImageView[@content-desc="Back"]', 'Back after code not received', 3)
    PressButton(driver, '//android.widget.TextView[@text="Edit"]', 'Another back after code not received', 3)
    raise ErrorAfterNumberInsertion


def CheckAllSms(user_id: int) -> dict | None:
    res = {}
    try:
        response = get(URL_SMS, params={'apikey': TOKEN_SIM})
    except ConnectionError as e:
        Stamp(f'Failed to connect to the server: {e}', 'e')
        BOT.send_message(user_id, f'‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≤—è–∑–∞—Ç—å—Å—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–¥–æ–≤...')
    else:
        if str(response.status_code)[0] == '2':
            for item in response.json():
                if 'msg' in item:
                    res[item['number']] = item['msg']
        else:
            Stamp(f'Failed to get list of sms: {response.text}', 'e')
            BOT.send_message(user_id, f'‚ùå –°—Ç–∞—Ç—É—Å {response.status_code} –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Å–º—Å...')
    return res
